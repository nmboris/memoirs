---
import BadgeLink from "@components/BadgeLink.astro";
import Content404 from "@components/Content404.astro";
import ContentRenderer from "@components/markdoc/render/ContentRenderer.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import { getMemoServerCfg } from "@lib/apiHelper";
import type {
	MemosHost,
} from "@lib/types";

import Backlinks from "@components/Backlinks.astro";
import Link from "@components/markdoc/nodes/Link.astro";
import { GlobalCache } from "@lib/globalCache";
import type { APIContext } from "astro";

const { id } = Astro.params;

// TODO: Hack, for compatibility see https://docs.astro.build/en/reference/api-reference/#endpoint-context
const astro = Astro as unknown as APIContext;
const data = await GlobalCache.getInstance().getMemo(astro, id)

const baseProps = { title: data.memo?.title ?? "memoirs", description: data.memo?.abstract ?? "A blogging service for usememos.com" };

const localDateOptions: Intl.DateTimeFormatOptions = {
	weekday: "long",
	year: "numeric",
	month: "long",
	day: "numeric",
};

const localDateOptionsMobile: Intl.DateTimeFormatOptions = {
	year: "numeric",
	month: "long",
	day: "numeric",
};
---

<BaseLayout {...baseProps}>
	<main class="section">
		<article>
			{ data.error ? (<div><Content404 pageName={""} error={data.error} /></div>) : (<></>) }
				
				{
					data.memo ? (
						<div class="content">
							<h1>{data.memo.title}</h1>
							<div class="metadata">
								<div>
									{data.memo.creatorName}
									{data.cacheHit ? "(cached)" : "NOT cached"}
									<svg
										stroke="currentColor"
										fill="currentColor"
										stroke-width="0"
										viewBox="0 0 24 24"
										xmlns="http://www.w3.org/2000/svg"
									>
										<>
											<path d="M19 4h-3V2h-2v2h-4V2H8v2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2V6c0-1.103-.897-2-2-2zM5 20V7h14V6l.002 14H5z" />
											<path d="m15.628 12.183-1.8-1.799 1.37-1.371 1.8 1.799zm-7.623 4.018V18h1.799l4.976-4.97-1.799-1.799z" />
										</>
									</svg>
									<span class="showDesktop">
										{new Date(data.memo.updatedTs * 1000).toLocaleDateString(
											undefined,
											localDateOptions
										)}
									</span>
									<span class="showMobile">
										{new Date(data.memo.updatedTs * 1000).toLocaleDateString(
											undefined,
											localDateOptionsMobile
										)}
									</span>
								</div>
							</div>
							<div class="hero-image">
								{data.memo.imageUrl ? (
									<img src={data.memo.imageUrl} alt="Hero" />
								) : (
									(<></>)
								)}
							</div>

							<BadgeLink
								style="margin-inline: auto; margin-bottom: var(--space-8);"
								text="Visit memos' source page â†’"
								href={`${GlobalCache.getInstance().getSystemURLs(astro)!.MemosSourceUrl}/${data.memo.id}`}
							/>

							<ContentRenderer doc={data.memo} />

							{(data.relations?.length > 0 ||
								data.memo.resourceList.length >0 ) ? <hr /> : <></>}

							{data.memo.resourceList?.length > 0 && (
								<h6 style="padding-top: var(--space-4);">Attachments</h6>
							)}
							{data.memo.resourceList?.map((resource) => {
								return (
									<div class="ref">
										<Link href={`${GlobalCache.getInstance().getSystemURLs(astro)!.MemosAssetUrl}/${resource.id}`}>
											{resource.filename}
										</Link>
									</div>
								);
							})}

							{data.relations?.length > 0 && (
								<h6 style="padding-top: var(--space-4);">Relations</h6>
							)}
							{data.relations?.map((relation) => {
								return (
									<div class="ref">
										<Link href={`/memo/${relation?.relatedMemoId}`}>
											{relation?.title}
										</Link>
									</div>
								);
							})}
						</div>
					) : (<></>)
					
				}
				{data.memo && <Backlinks doc={data.memo} showDivider={data.relations?.length === 0 && data.memo.resourceList.length === 0} />}
		</article>
	</main>
</BaseLayout>

<style>
	hr {
		width: 12rem;
		background-color: var(--color-secondary);
		height: 3px;
		border: none;

		margin: var(--space-16) 0 var(--space-1) 0;
	}

	.showDesktop {
		@media (max-width: 720px) {
			display: none;
		}
	}

	.showMobile {
		@media (min-width: 720px) {
			display: none;
		}
	}

	svg {
		margin-left: var(--space-4);
		height: calc(1.4 * var(--font-size-paragraph));
	}

	:global(p) {
		margin-bottom: var(--space-4);
	}

	:global(li:last-child) {
		margin-bottom: var(--space-4);
	}

	h1 {
		margin-bottom: var(--space-4);
	}

	.metadata {
		display: grid;
		grid-auto-flow: column;
		place-items: center;

		color: var(--color-text-2);
		font-size: calc(0.8 * var(--font-size-paragraph));
		margin-bottom: var(--space-4);

		& div {
			padding: 0;
			margin: 0;
			display: flex;
			align-items: center;
			gap: var(--space-2);
		}
	}

	.hero-image {
		max-width: 100%;

		& img {
			width: 100%;
			height: var(--hero-image-height);
			object-fit: cover;
			margin-bottom: var(--space-1);
			border-radius: var(--radius);
		}
	}

	.ref {
		font-size: calc(0.8 * var(--font-size-paragraph));
		padding-left: var(--space-4);
	}

	@media (max-width: 720px) {
		main {
			padding-inline: var(--space-4);
		}

		.metadata > div {
			width: 100%;
			display: grid;
			grid-template-columns: 1fr auto auto;
		}

		.badgeLink {
			text-align: center;
			margin-top: var(--space-2);
		}
	}
</style>

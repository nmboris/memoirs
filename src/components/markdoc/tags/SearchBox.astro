---
// import type { CookieData, MemoWithMeta } from "@lib/types";
// import { doTagSearch, doContentSearch } from "@lib/memosHandler";
// import { parse } from "@lib/markdocParser";

import Box from "@components/Box.astro";
import Content404 from "@components/Content404.astro";
import { getMemoServerCfg } from "@lib/apiHelper";
import { filterOutPages, parseMarkdoc } from "@lib/markdocHelpers";
import type { APIMemoQueryResponse, MemoWithMeta, MemosHost } from "@lib/types";

import { GET } from "@api/memos.ts";

export const searchbox = {
	render: "SearchBox",
	attributes: {
		title: {
			type: String,
			default: "Search",
		},
		query: {
			type: String,
			default: "",
		},
		type: {
			type: String,
			default: "tag",
			matches: ["content", "tag"],
		},
		count: {
			type: Number,
			default: 3,
		},
	},
};

type Props = {
	title: string;
	query: string;
	type: "tag" | "content";
	count: number;
	limit?: number;
};

const { title, query, count } = Astro.props;

const memoHostData = Astro.cookies
	.get("memoirs.memos.host")!
	.json() as MemosHost; // Set in middleware

const { MemosAssetUrl } = getMemoServerCfg(Astro.url.origin, memoHostData);

let markDocWithMeta: MemoWithMeta[] = [];
let error: Error | null = null;

try {
	Astro.props.query = query;
	Astro.props.limit = 30; // TODO: Workaround for the problem, finding Pages in result aka. no filtering

	// TODO: The following GET error is an Astro specific probleme,
	// see https://github.com/withastro/astro/issues/8514
	// @ts-ignore
	const memosResp = (await GET(Astro)) as Response;
	const memoResult = (await memosResp.json()) as APIMemoQueryResponse;

	// TODO: num of query results has to differ from search results!!

	markDocWithMeta = memoResult.data.map((memo) =>
		parseMarkdoc(MemosAssetUrl, memo)
	);

	markDocWithMeta = filterOutPages(markDocWithMeta).slice(0, count);
} catch (e) {
	error = e as Error;
	console.error(e);
}
---

<Box style="background-color: white;">
	<h2 class="title">{title}</h2>
	<ul>
		{error && <Content404 pageName={""} {error} />}
		{
			markDocWithMeta.map((md) => (
				<li>
					<h2>
						<a href={`/memo/${md.id}`}>{md.title || "Memo"}</a>
						<span>â®ž</span>
					</h2>
					<p class="abstract">{md.abstract}</p>
				</li>
			))
		}
	</ul>
</Box>
<style>
	.title {
		font-weight: bold;
		text-align: start;
		padding-top: 0;

		text-align: center;
		margin-bottom: var(--space-2);
		text-transform: uppercase;
	}

	ul {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	li {
		padding-left: var(--space-2);

		& p {
			padding-left: var(--space-2);
		}
	}

	li:last-child {
		margin-bottom: 0;
	}

	a {
		/* margin-bottom: 0.1rem; */
		text-decoration: none;
		color: inherit;
	}

	a:hover {
		text-decoration: underline;
	}

	h2 {
		display: flex;
		justify-content: space-between;
		align-items: center;

		text-align: left;
		font-weight: normal;
		font-size: medium;
		margin: 0 0 0.2rem 0;
	}

	p {
		font-size: small;
		line-height: 1.2;
		margin-top: 0;
	}
</style>

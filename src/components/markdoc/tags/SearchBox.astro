---
import type { APIContext } from "astro";
import type { MemoWithMeta } from "@lib/types";
import { GlobalCache } from "@lib/globalCache";

import Box from "@components/Box.astro";
import Content404 from "@components/Content404.astro";

export const searchbox = {
	render: "SearchBox",
	attributes: {
		title: {
			type: String,
			default: "Search",
		},
		query: {
			type: String,
			default: "",
		},
		type: {
			type: String,
			default: "tag",
			matches: ["content", "tag"],
		},
		count: {
			type: Number,
			default: 3,
		},
	},
};

type Props = {
	title: string;
	query: string;
	type: "tag" | "content";
	count: number;
	limit?: number;
	tag?: string;
	content?: string;
	filterPages?: boolean;
};

const { title, type, query, count } = Astro.props;

// TODO: Hack, for compatibility see https://docs.astro.build/en/reference/api-reference/#endpoint-context
const astro = Astro as unknown as APIContext;

let error: Error | null = null;

switch (type) {
	case "tag":
		if (!query) {
			error = new Error("No query");
		}

		Astro.props.tag = query;
		break;
	case "content":
		if (!query) {
			error = new Error("No query");
		}
		Astro.props.content = query;
		break;
	default:
		error = new Error("Unknown type");
}

Astro.props.limit = count;
Astro.props.filterPages = false;

const resultList = await GlobalCache.getInstance().getMemoList(astro);
---

<Box style="background-color: white;">
	<h2 class="title">{title}</h2>
	<ul>
		{error && <Content404 pageName={""} {error} />}
		{
			resultList &&
				resultList.memos &&
				resultList.memos.map((md) => (
					<li>
						<h2>
							<a href={`/memo/${md.id}`}>{md.title || "Memo"}</a>
							<span>
								<svg
									xmlns="http://www.w3.org/2000/svg"
									width="24"
									height="24"
									viewBox="0 0 24 24"
								>
									<path
										fill="currentColor"
										d="M17.92 11.62a1 1 0 0 0-.21-.33l-5-5a1 1 0 0 0-1.42 1.42l3.3 3.29H7a1 1 0 0 0 0 2h7.59l-3.3 3.29a1 1 0 0 0 0 1.42a1 1 0 0 0 1.42 0l5-5a1 1 0 0 0 .21-.33a1 1 0 0 0 0-.76Z"
									/>
								</svg>
							</span>
						</h2>
						<p class="abstract">{md.abstract}</p>
					</li>
				))
		}
	</ul>
</Box>
<style>
	.title {
		font-weight: bold;
		text-align: start;
		padding-top: 0;

		margin-bottom: var(--space-2);
		text-transform: uppercase;
	}

	ul {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	li {
		padding-left: var(--space-2);

		& p {
			padding-left: var(--space-2);
		}
	}

	li:last-child {
		margin-bottom: 0;
	}

	a {
		/* margin-bottom: 0.1rem; */
		text-decoration: none;
		color: inherit;
	}

	a:hover {
		text-decoration: underline;
	}

	h2 {
		display: flex;
		justify-content: space-between;
		align-items: center;

		text-align: left;
		font-weight: normal;
		font-size: medium;
		margin: 0 0 0.2rem 0;
	}

	p {
		font-size: small;
		line-height: 1.2;
		margin-top: 0;
	}
</style>

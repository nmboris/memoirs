---
import type { GlobalCacheMemoResultList, MemoWithMeta, MemosHost } from "@lib/types";
import Link from "./markdoc/nodes/Link.astro";

import { GlobalCache } from "@lib/globalCache";
import type { APIContext } from "astro";

type Props = {
	doc: MemoWithMeta;
	showDivider?: boolean;
	content?: string;
};

const { doc, showDivider=false } = Astro.props;
const slug = doc.frontmatter.memoirs_slug;

console.log(":: SLUG", slug, doc.frontmatter);

let markdocsWithMeta: MemoWithMeta[] = [];

const content = `[[${slug}]]`;
Astro.props.content = content;

// TODO: Hack, for compatibility see https://docs.astro.build/en/reference/api-reference/#endpoint-context
const astro = Astro as unknown as APIContext;
const data = await GlobalCache.getInstance().getMemoList(astro) as GlobalCacheMemoResultList;

---

{
	data.memos?.length ? (
		<div class="backlinks">
			{showDivider ? (
				<hr />
			) : (
				<></>
			)}
			<h6 style="padding-top: var(--space-4);">Backlinks</h6>
			<ul>
				{markdocsWithMeta.map((mdoc) => (
					<li>
						<Link href={`/memo/${mdoc.id}`}>{mdoc.title}</Link>
					</li>
				))}
			</ul>
		</div>
	) : (<></>)
}

<style>
	ul {
		list-style: none;
		padding: 0;
		margin: 0;

		font-size: calc(0.9 * var(--font-size-paragraph));
	}

	li {
		margin-left: var(--space-4);
	}

	hr {
		width: 12rem;
		background-color: var(--color-secondary);
		height: 3px;
		border: none;

		margin: var(--space-16) 0 var(--space-1) 0;
	}
</style>
